{
  "base_url": "https://lark-parser.readthedocs.io/en/stable/",
  "mapped_urls": [
    "https://lark-parser.readthedocs.io/en/stable",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/conf_earley.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/qscintilla_json.html",
    "https://lark-parser.readthedocs.io/en/stable/_static/lark_cheatsheet.pdf",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/custom_lexer.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/_json_parser.html",
    "https://lark-parser.readthedocs.io/en/stable/forest.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/dynamic_complete.html",
    "https://lark-parser.readthedocs.io/en/stable/how_to_use.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/47174f1088585b541b7296c461639c79/eval_csv.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/2cc75b757e7515472722c8c02d4fe4e4/error_reporting_lalr.py",
    "https://lark-parser.readthedocs.io/en/stable/classes.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/7cc2abf4fecd3796ed4ad6d455bda349/indented_tree.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/347194332333371dddab71778db00fd5/py3to2.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/179842700c93c6cca88ed33e1b99eb9c/json_parser.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/9e5ca2d2f34acae5a9391bd4b16a935f/conf_lalr.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/tree_forest_transformer.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/3933bf173c425fd28a9c4d7c72b8eca1/python_parser.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/9056f9d3440746d8fe151c31173e18e6/qscintilla_json.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/3ed7cc698fc366fe253eac6ecf76ee3e/conf_lalr.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/207f80f4ec59e1e363837373665f649f/turtle_dsl.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/error_reporting_earley.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/create_ast.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/59e28e5e93b13914beea3268d124ef92/eval_json.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/grammar.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/57b38708c982e98764460c3e288a1ff5/reconstruct_python.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/py3to2.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/templates.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/bfeb22cff3ae6c24841aad8c5a95d047/create_ast.py",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/index.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/9d7d9d95319f4514ab7247f8eb86ddf0/tree_forest_transformer.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/98afe2f1c3b9485fcb8bdeebbbf0234f/main.py",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/python_parser.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/calc.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/63680f346bf793a45964b4e687bde3d9/calc.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/json_parser.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/b9abd703bb1b061d8ae5f6ab1b9393e8/lark_grammar.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/1e229dcdb521be752d4349e61ead59d1/qscintilla_json.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/f034a71a096a9049dcf409ec85c36943/conf_earley.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/composition",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/6dea8dbfb244508aaa3b8283470f8c2d/prioritizer.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/index.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/b0239cee17ba033b2ccfffe66491b86e/fruitflies.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/5811ce5e933efd9af1ae8e52d16a3a4f/custom_lexer.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/3a11fd47a1fb670a6759747d618a244e/error_handling.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/adf07a4514e9cfb278aef018e6994028/reconstruct_json.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/60290154124d6b16926446036bb711d6/python_parser.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/composition/main.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/reconstruct_python.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/11091a0f6990e281219479476971fa12/eval_json.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/3b0766c1f76ff2904339853615cf4943/reconstruct_python.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/7279f5d640bfe9814468a2adf38516d5/error_reporting_lalr.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/222c07e0396620c7fabb1da7fda69ca9/json_parser_main.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/4667ab58050962ac05455b953c59244f/custom_lexer.py",
    "https://lark-parser.readthedocs.io/en/stable/examples/composition/eval_csv.html",
    "https://lark-parser.readthedocs.io/en/stable/philosophy.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/6619e43bab1bed7430fa709940e67aa2/templates.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/how_to_develop.html",
    "https://lark-parser.readthedocs.io/en/stable/tools.html",
    "https://lark-parser.readthedocs.io/en/stable/json_tutorial.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/lark_grammar.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/c1123c2587eda70bc64752df00c577b1/py3to2.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/9cadc23f6b1e9e52f35d3cb0a28053b0/turtle_dsl.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/9edfb38ad3bc19fc2b92c728275b9008/main.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/9ebc86868010e2fc400ecf1ef8a5aa4a/fruitflies.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/standalone/json_parser_main.html",
    "https://lark-parser.readthedocs.io/en/stable/parsers.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/2f68c21f7729a47e57d3ae345753e407/lark_grammar.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/ca074bdcc9170e436dcd2f779e4a4285/error_reporting_earley.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/3c07a7adfbea6387847af2b079a58ed6/prioritizer.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/de026e34f2e30342f31740044e683d7b/eval_csv.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/conf_lalr.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/1bc3cb4e14f2c898c0bf16247304d5b2/conf_earley.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/ee39a682704904d3f08f1d957831c955/_json_parser.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/composition/eval_json.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/fc674523e7ef0712dfc331b1ddd10972/dynamic_complete.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/reconstruct_json.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/50b59008a60a728670b293084a6fe042/calc.py",
    "https://lark-parser.readthedocs.io/en/stable/examples/grammars/index.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/4b6a9b4fb62278f5d7a70e5b2900ff58/indented_tree.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/visitors.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/5a9e0a0dc353e4a9357e2204639f6c76/error_handling.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/55c526745700131cb7096e508b392be7/json_parser_main.py",
    "https://lark-parser.readthedocs.io/en/stable/examples/indented_tree.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/prioritizer.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/08132b45db8ea39c7a8efd8acc048de2/create_ast.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/6d1927842b20958cbf08c916e786d2d0/_json_parser.py",
    "https://lark-parser.readthedocs.io/en/stable/tree_construction.html",
    "https://lark-parser.readthedocs.io/en/stable/features.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/9897e3d2b4b242b1ded5769f50c0eea1/json_parser.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/22081051f999d4e0753796b91b344ee3/dynamic_complete.py",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/2d7086e8ce7628b916237820c20847e4/tree_forest_transformer.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/examples/standalone/index.html",
    "https://lark-parser.readthedocs.io/en/stable/recipes.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/turtle_dsl.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/d3b43c711b7f9a6aeee99f79cf861539/templates.py",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/error_handling.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/advanced/error_reporting_lalr.html",
    "https://lark-parser.readthedocs.io/en/stable/examples/fruitflies.html",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/bdb62f1189ee436f5378982a91ecc1cf/error_reporting_earley.ipynb",
    "https://lark-parser.readthedocs.io/en/stable/_downloads/e6911b819cf4afa1ca68b5be22630e13/reconstruct_json.py",
    "https://lark-parser.readthedocs.io/en/stable/examples/standalone"
  ],
  "scraped_documents": [
    {
      "url": "https://lark-parser.readthedocs.io/en/stable/examples/standalone",
      "markdown": "- [Home](https://lark-parser.readthedocs.io/en/stable/index.html)\n- [Examples for Lark](https://lark-parser.readthedocs.io/en/stable/examples/index.html)\n- Standalone example\n- [Edit on GitHub](https://github.com/lark-parser/lark/blob/acfe33d943a1310f3ca26145eb2896bc5c4955c9/docs/examples/standalone/index.rst)\n\n[Previous](https://lark-parser.readthedocs.io/en/stable/examples/grammars/index.html \"Example Grammars\") [Next](https://lark-parser.readthedocs.io/en/stable/examples/standalone/json_parser_main.html \"Standalone Parser\")\n\n* * *\n\n# Standalone example [\uf0c1](https://lark-parser.readthedocs.io/en/stable/examples/standalone/index.html\\#standalone-example \"Permalink to this heading\")\n\nTo initialize, cd to this folder, and run:\n\n```\n./create_standalone.sh\n\n```\n\nOr:\n\n```\npython -m lark.tools.standalone json.lark > json_parser.py\n\n```\n\nThen run using:\n\n```\npython json_parser_main.py <path-to.json>\n\n```\n\n![](https://lark-parser.readthedocs.io/en/stable/_images/sphx_glr_json_parser_main_thumb.png)\n\n[Standalone Parser](https://lark-parser.readthedocs.io/en/stable/examples/standalone/json_parser_main.html#sphx-glr-examples-standalone-json-parser-main-py)\n\nStandalone Parser\n\nVersions[latest](https://lark-parser.readthedocs.io/en/latest/examples/standalone/)**[stable](https://lark-parser.readthedocs.io/en/stable/examples/standalone/)**Downloads[PDF](https://lark-parser.readthedocs.io/_/downloads/en/stable/pdf/)[HTML](https://lark-parser.readthedocs.io/_/downloads/en/stable/htmlzip/)[EPUB](https://lark-parser.readthedocs.io/_/downloads/en/stable/epub/)On Read the Docs[Project Home](https://app.readthedocs.org/projects/lark-parser/?utm_source=lark-parser&utm_content=flyout)[Builds](https://app.readthedocs.org/projects/lark-parser/builds/?utm_source=lark-parser&utm_content=flyout)Search\n\n* * *\n\n[Addons documentation](https://docs.readthedocs.io/page/addons.html?utm_source=lark-parser&utm_content=flyout) \u2015 Hosted by\n[Read the Docs](https://about.readthedocs.com/?utm_source=lark-parser&utm_content=flyout)",
      "metadata": {
        "title": "Standalone example \u2014 Lark  documentation",
        "url": "https://lark-parser.readthedocs.io/en/stable/examples/standalone/index.html",
        "language": "en",
        "source_url": "https://lark-parser.readthedocs.io/en/stable/examples/standalone",
        "status_code": 200,
        "scrape_id": "aa7edc80-c97f-4409-9196-0211d8afa452",
        "content_type": "text/html; charset=utf-8",
        "proxy_used": "basic",
        "cache_state": "hit",
        "cached_at": "2025-09-17T15:42:00.263Z",
        "credits_used": 1
      }
    },
    {
      "url": "https://lark-parser.readthedocs.io/en/stable/_downloads/e6911b819cf4afa1ca68b5be22630e13/reconstruct_json.py",
      "markdown": "```\n\"\"\"\nReconstruct a JSON\n==================\n\nDemonstrates the experimental text-reconstruction feature\n\nThe Reconstructor takes a parse tree (already filtered from punctuation, of course),\nand reconstructs it into correct text, that can be parsed correctly.\nIt can be useful for creating \"hooks\" to alter data before handing it to other parsers. You can also use it to generate samples from scratch.\n\"\"\"\n\nimport json\n\nfrom lark import Lark\nfrom lark.reconstruct import Reconstructor\n\nfrom _json_parser import json_grammar\n\ntest_json = '''\n    {\n        \"empty_object\" : {},\n        \"empty_array\"  : [],\n        \"booleans\"     : { \"YES\" : true, \"NO\" : false },\n        \"numbers\"      : [ 0, 1, -2, 3.3, 4.4e5, 6.6e-7 ],\n        \"strings\"      : [ \"This\", [ \"And\" , \"That\", \"And a \\\\\"b\" ] ],\n        \"nothing\"      : null\n    }\n'''\n\ndef test_earley():\n\n    json_parser = Lark(json_grammar, maybe_placeholders=False)\n    tree = json_parser.parse(test_json)\n\n    new_json = Reconstructor(json_parser).reconstruct(tree)\n    print (new_json)\n    print (json.loads(new_json) == json.loads(test_json))\n\ndef test_lalr():\n\n    json_parser = Lark(json_grammar, parser='lalr', maybe_placeholders=False)\n    tree = json_parser.parse(test_json)\n\n    new_json = Reconstructor(json_parser).reconstruct(tree)\n    print (new_json)\n    print (json.loads(new_json) == json.loads(test_json))\n\ntest_earley()\ntest_lalr()\n\n```",
      "metadata": {
        "url": "https://lark-parser.readthedocs.io/en/stable/_downloads/e6911b819cf4afa1ca68b5be22630e13/reconstruct_json.py",
        "source_url": "https://lark-parser.readthedocs.io/en/stable/_downloads/e6911b819cf4afa1ca68b5be22630e13/reconstruct_json.py",
        "status_code": 200,
        "scrape_id": "23b5a8f5-09a1-427d-a8bc-d6778f4d6ffd",
        "content_type": "text/x-python",
        "proxy_used": "basic",
        "cache_state": "hit",
        "cached_at": "2025-09-17T15:42:00.521Z",
        "credits_used": 1
      }
    },
    {
      "url": "https://lark-parser.readthedocs.io/en/stable/_downloads/c1123c2587eda70bc64752df00c577b1/py3to2.ipynb",
      "markdown": "```\n{\n  \"cells\": [\\\n    {\\\n      \"cell_type\": \"markdown\",\\\n      \"metadata\": {},\\\n      \"source\": [\\\n        \"\\n# Python 3 to Python 2 converter (tree templates)\\n\\nThis example demonstrates how to translate between two trees using tree templates.\\nIt parses Python 3, translates it to a Python 2 AST, and then outputs the result as Python 2 code.\\n\\nUses reconstruct_python.py for generating the final Python 2 code.\\n\"\\\n      ]\\\n    },\\\n    {\\\n      \"cell_type\": \"code\",\\\n      \"execution_count\": null,\\\n      \"metadata\": {\\\n        \"collapsed\": false\\\n      },\\\n      \"outputs\": [],\\\n      \"source\": [\\\n        \"from lark import Lark\\nfrom lark.tree_templates import TemplateConf, TemplateTranslator\\n\\nfrom lark.indenter import PythonIndenter\\nfrom reconstruct_python import PythonReconstructor\\n\\n\\n#\\n# 1. Define a Python parser that also accepts template vars in the code (in the form of $var)\\n#\\nTEMPLATED_PYTHON = r\\\"\\\"\\\"\\n%import python (single_input, file_input, eval_input, atom, var, stmt, expr, testlist_star_expr, _NEWLINE, _INDENT, _DEDENT, COMMENT, NAME)\\n\\n%extend atom: TEMPLATE_NAME -> var\\n\\nTEMPLATE_NAME: \\\"$\\\" NAME\\n\\n?template_start: (stmt | testlist_star_expr _NEWLINE)\\n\\n%ignore /[\\\\t \\\\f]+/          // WS\\n%ignore /\\\\\\\\[\\\\t \\\\f]*\\\\r?\\\\n/   // LINE_CONT\\n%ignore COMMENT\\n\\\"\\\"\\\"\\n\\nparser = Lark(TEMPLATED_PYTHON, parser='lalr', start=['single_input', 'file_input', 'eval_input', 'template_start'], postlex=PythonIndenter(), maybe_placeholders=False)\\n\\n\\ndef parse_template(s):\\n    return parser.parse(s + '\\\\n', start='template_start')\\n\\ndef parse_code(s):\\n    return parser.parse(s + '\\\\n', start='file_input')\\n\\n\\n#\\n# 2. Define translations using templates (each template code is parsed to a template tree)\\n#\\n\\npytemplate = TemplateConf(parse=parse_template)\\n\\ntranslations_3to2 = {\\n    'yield from $a':\\n\\t    'for _tmp in $a: yield _tmp',\\n\\n    'raise $e from $x':\\n    \\t'raise $e',\\n\\n    '$a / $b':\\n\\t    'float($a) / $b',\\n}\\ntranslations_3to2 = {pytemplate(k): pytemplate(v) for k, v in translations_3to2.items()}\\n\\n#\\n# 3. Translate and reconstruct Python 3 code into valid Python 2 code\\n#\\n\\npython_reconstruct = PythonReconstructor(parser)\\n\\ndef translate_py3to2(code):\\n\\ttree = parse_code(code)\\n\\ttree = TemplateTranslator(translations_3to2).translate(tree)\\n\\treturn python_reconstruct.reconstruct(tree)\\n\\n\\n#\\n# Test Code\\n#\\n\\n_TEST_CODE = '''\\nif a / 2 > 1:\\n    yield from [1,2,3]\\nelse:\\n    raise ValueError(a) from e\\n\\n'''\\n\\ndef test():\\n\\tprint(_TEST_CODE)\\n\\tprint('   ----->    ')\\n\\tprint(translate_py3to2(_TEST_CODE))\\n\\nif __name__ == '__main__':\\n\\ttest()\"\\\n      ]\\\n    }\\\n  ],\n  \"metadata\": {\n    \"kernelspec\": {\n      \"display_name\": \"Python 3\",\n      \"language\": \"python\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"codemirror_mode\": {\n        \"name\": \"ipython\",\n        \"version\": 3\n      },\n      \"file_extension\": \".py\",\n      \"mimetype\": \"text/x-python\",\n      \"name\": \"python\",\n      \"nbconvert_exporter\": \"python\",\n      \"pygments_lexer\": \"ipython3\",\n      \"version\": \"3.7.17\"\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n```",
      "metadata": {
        "url": "https://lark-parser.readthedocs.io/en/stable/_downloads/c1123c2587eda70bc64752df00c577b1/py3to2.ipynb",
        "source_url": "https://lark-parser.readthedocs.io/en/stable/_downloads/c1123c2587eda70bc64752df00c577b1/py3to2.ipynb",
        "status_code": 200,
        "scrape_id": "e29eab1f-0887-4d4e-bebb-e6f025eb75f7",
        "content_type": "application/x-ipynb+json",
        "proxy_used": "basic",
        "cache_state": "hit",
        "cached_at": "2025-09-17T15:41:59.934Z",
        "credits_used": 1
      }
    },
    {
      "url": "https://lark-parser.readthedocs.io/en/stable/_downloads/9edfb38ad3bc19fc2b92c728275b9008/main.ipynb",
      "markdown": "```\n{\n  \"cells\": [\\\n    {\\\n      \"cell_type\": \"markdown\",\\\n      \"metadata\": {},\\\n      \"source\": [\\\n        \"\\n# Grammar Composition\\n\\nThis example shows how to do grammar composition in Lark, by creating a new\\nfile format that allows both CSV and JSON to co-exist.\\n\\n1) We define ``storage.lark``, which imports both ``csv.lark`` and ``json.lark``,\\n  and allows them to be used one after the other.\\n\\n  In the generated tree, each imported rule/terminal is automatically prefixed (with ``json__`` or ``csv__),\\n  which creates an implicit namespace and allows them to coexist without collisions.\\n\\n2) We merge their respective transformers (unaware of each other) into a new base transformer.\\n   The resulting transformer can evaluate both JSON and CSV in the parse tree.\\n\\n  The methods of each transformer are renamed into their appropriate namespace, using the given prefix.\\n  This approach allows full re-use: the transformers don't need to care if their grammar is used directly,\\n  or being imported, or who is doing the importing.\\n\"\\\n      ]\\\n    },\\\n    {\\\n      \"cell_type\": \"code\",\\\n      \"execution_count\": null,\\\n      \"metadata\": {\\\n        \"collapsed\": false\\\n      },\\\n      \"outputs\": [],\\\n      \"source\": [\\\n        \"from pathlib import Path\\nfrom lark import Lark\\nfrom json import dumps\\nfrom lark.visitors import Transformer, merge_transformers\\n\\nfrom eval_csv import CsvTreeToPandasDict\\nfrom eval_json import JsonTreeToJson\\n\\n__dir__ = Path(__file__).parent\\n\\nclass Storage(Transformer):\\n    def start(self, children):\\n        return children\\n\\nstorage_transformer = merge_transformers(Storage(), csv=CsvTreeToPandasDict(), json=JsonTreeToJson())\\n\\nparser = Lark.open(\\\"storage.lark\\\", rel_to=__file__)\\n\\ndef main():\\n    json_tree = parser.parse(dumps({\\\"test\\\": \\\"a\\\", \\\"dict\\\": { \\\"list\\\": [1, 1.2] }}))\\n    res = storage_transformer.transform(json_tree)\\n    print(\\\"Just JSON: \\\", res)\\n\\n    csv_json_tree = parser.parse(open(__dir__ / 'combined_csv_and_json.txt').read())\\n    res = storage_transformer.transform(csv_json_tree)\\n    print(\\\"JSON + CSV: \\\", dumps(res, indent=2))\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\"\\\n      ]\\\n    }\\\n  ],\n  \"metadata\": {\n    \"kernelspec\": {\n      \"display_name\": \"Python 3\",\n      \"language\": \"python\",\n      \"name\": \"python3\"\n    },\n    \"language_info\": {\n      \"codemirror_mode\": {\n        \"name\": \"ipython\",\n        \"version\": 3\n      },\n      \"file_extension\": \".py\",\n      \"mimetype\": \"text/x-python\",\n      \"name\": \"python\",\n      \"nbconvert_exporter\": \"python\",\n      \"pygments_lexer\": \"ipython3\",\n      \"version\": \"3.7.17\"\n    }\n  },\n  \"nbformat\": 4,\n  \"nbformat_minor\": 0\n}\n```",
      "metadata": {
        "url": "https://lark-parser.readthedocs.io/en/stable/_downloads/9edfb38ad3bc19fc2b92c728275b9008/main.ipynb",
        "source_url": "https://lark-parser.readthedocs.io/en/stable/_downloads/9edfb38ad3bc19fc2b92c728275b9008/main.ipynb",
        "status_code": 200,
        "scrape_id": "c7c027e4-e50c-44fc-b2d8-9b9d0ebc2ced",
        "content_type": "application/x-ipynb+json",
        "proxy_used": "basic",
        "cache_state": "hit",
        "cached_at": "2025-09-17T15:42:00.058Z",
        "credits_used": 1
      }
    },
    {
      "url": "https://lark-parser.readthedocs.io/en/stable/_downloads/9cadc23f6b1e9e52f35d3cb0a28053b0/turtle_dsl.py",
      "markdown": "```\n\"\"\"\nTurtle DSL\n==========\n\nImplements a LOGO-like toy language for Python\u2019s turtle, with interpreter.\n\"\"\"\n\ntry:\n    input = raw_input   # For Python2 compatibility\nexcept NameError:\n    pass\n\nimport turtle\n\nfrom lark import Lark\n\nturtle_grammar = \"\"\"\n    start: instruction+\n\n    instruction: MOVEMENT NUMBER            -> movement\n               | \"c\" COLOR [COLOR]          -> change_color\n               | \"fill\" code_block          -> fill\n               | \"repeat\" NUMBER code_block -> repeat\n\n    code_block: \"{\" instruction+ \"}\"\n\n    MOVEMENT: \"f\"|\"b\"|\"l\"|\"r\"\n    COLOR: LETTER+\n\n    %import common.LETTER\n    %import common.INT -> NUMBER\n    %import common.WS\n    %ignore WS\n\"\"\"\n\nparser = Lark(turtle_grammar)\n\ndef run_instruction(t):\n    if t.data == 'change_color':\n        turtle.color(*t.children)   # We just pass the color names as-is\n\n    elif t.data == 'movement':\n        name, number = t.children\n        { 'f': turtle.fd,\n          'b': turtle.bk,\n          'l': turtle.lt,\n          'r': turtle.rt, }[name](int(number))\n\n    elif t.data == 'repeat':\n        count, block = t.children\n        for i in range(int(count)):\n            run_instruction(block)\n\n    elif t.data == 'fill':\n        turtle.begin_fill()\n        run_instruction(t.children[0])\n        turtle.end_fill()\n\n    elif t.data == 'code_block':\n        for cmd in t.children:\n            run_instruction(cmd)\n    else:\n        raise SyntaxError('Unknown instruction: %s' % t.data)\n\ndef run_turtle(program):\n    parse_tree = parser.parse(program)\n    for inst in parse_tree.children:\n        run_instruction(inst)\n\ndef main():\n    while True:\n        code = input('> ')\n        try:\n            run_turtle(code)\n        except Exception as e:\n            print(e)\n\ndef test():\n    text = \"\"\"\n        c red yellow\n        fill { repeat 36 {\n            f200 l170\n        }}\n    \"\"\"\n    run_turtle(text)\n\nif __name__ == '__main__':\n    # test()\n    main()\n\n```",
      "metadata": {
        "url": "https://lark-parser.readthedocs.io/en/stable/_downloads/9cadc23f6b1e9e52f35d3cb0a28053b0/turtle_dsl.py",
        "source_url": "https://lark-parser.readthedocs.io/en/stable/_downloads/9cadc23f6b1e9e52f35d3cb0a28053b0/turtle_dsl.py",
        "status_code": 200,
        "scrape_id": "5495b3b0-9f4e-4320-b812-b7522da94448",
        "content_type": "text/x-python",
        "proxy_used": "basic",
        "cache_state": "hit",
        "cached_at": "2025-09-17T15:41:59.934Z",
        "credits_used": 1
      }
    }
  ],
  "follow_up_documents": [],
  "llm_decisions": [],
  "skipped_urls": [],
  "triage_runs": [],
  "prefix_suppressions": [],
  "key_map": {}
}